"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/stripe";
exports.ids = ["pages/api/stripe"];
exports.modules = {

/***/ "stripe":
/*!*************************!*\
  !*** external "stripe" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("stripe");

/***/ }),

/***/ "(api)/./pages/api/stripe.js":
/*!*****************************!*\
  !*** ./pages/api/stripe.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var stripe__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! stripe */ \"stripe\");\n/* harmony import */ var stripe__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(stripe__WEBPACK_IMPORTED_MODULE_0__);\n// import Stripe from 'stripe';\n// const stripe = new Stripe(process.env.NEXT_PUBLIC_STRIPE_SECRET_KEY);\n// export default async function handler(req, res) {\n//   if (req.method === 'POST') {\n//     try {\n//       const params = {\n//         submit_type: 'pay',\n//         mode: 'payment',\n//         payment_method_types: ['card'],\n//         billing_address_collection: 'auto',\n//         shipping_options: [\n//           { shipping_rate: 'shr_1LRDdVSGIUhjrMg4KTmfgI0l'},{shipping_rate: 'shr_1LRDfkSGIUhjrMg4TB0BFKVF'}\n//         ],\n//         line_items: req.body.map((item) => {\n//           const img = item.image[0].asset._ref;\n//           const newImage = img.replace('image-', 'https://cdn.sanity.io/images/u6rjpu5c/production/').replace('-webp', '.webp');\n//           return {\n//             price_data: { \n//               currency: 'inr',\n//               product_data: { \n//                 name: item.name,\n//                 images: [newImage],\n//               },\n//               unit_amount: item.price * 100,\n//             },\n//             adjustable_quantity: {\n//               enabled:true,\n//               minimum: 1,\n//             },\n//             quantity: item.quantity\n//           }\n//         }),\n//         success_url: `${req.headers.origin}/success`,\n//         cancel_url: `${req.headers.origin}/canceled`,\n//       }\n//       // Create Checkout Sessions from body params.\n//       const session = await stripe.checkout.sessions.create(params);\n//       res.status(200).json(session);\n//     } catch (err) {\n//       res.status(err.statusCode || 500).json(err.message);\n//     }\n//   } else {\n//     res.setHeader('Allow', 'POST');\n//     res.status(405).end('Method Not Allowed');\n//   }\n// }\n// import Stripe from 'stripe';\n\nconst stripe = new (stripe__WEBPACK_IMPORTED_MODULE_0___default())(\"sk_test_51LRCslSGIUhjrMg4QOCb0WzBwGazZPQGFMkUydw2S4hmat4LrVuK3GQbpVYQOGeDkEDkr2RNLeIAFgZGAom47wUj005sXM4m60\");\nasync function handler(req, res) {\n  if (req.method === 'POST') {\n    try {\n      const params = {\n        submit_type: 'pay',\n        mode: 'payment',\n        payment_method_types: ['card'],\n        billing_address_collection: 'auto',\n        shipping_options: [{\n          shipping_rate: 'shr_1LRDdVSGIUhjrMg4KTmfgI0l'\n        }],\n        line_items: req.body.map(item => {\n          const img = item.image[0].asset._ref;\n          const newImage = img.replace('image-', 'https://cdn.sanity.io/images/u6rjpu5c/production/').replace('-webp', '.webp');\n          return {\n            price_data: {\n              currency: 'usd',\n              product_data: {\n                name: item.name,\n                images: [newImage]\n              },\n              unit_amount: item.price * 100\n            },\n            adjustable_quantity: {\n              enabled: true,\n              minimum: 1\n            },\n            quantity: item.quantity\n          };\n        }),\n        success_url: `${req.headers.origin}/?success=true`,\n        cancel_url: `${req.headers.origin}/?canceled=true`\n      }; // Create Checkout Sessions from body params.\n\n      const session = await stripe.checkout.sessions.create(params);\n      res.status(200).json(session);\n    } catch (err) {\n      res.status(err.statusCode || 500).json(err.message);\n    }\n  } else {\n    res.setHeader('Allow', 'POST');\n    res.status(405).end('Method Not Allowed');\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./pages/api/stripe.js\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = (__webpack_exec__("(api)/./pages/api/stripe.js"));
module.exports = __webpack_exports__;

})();